knitr::opts_chunk$set(echo = TRUE)
#Installing the R library requirements:
install.packages("stringr")
install.packages("rJava")
#Installing r-causal from github:
library(devtools)
install.packages("devtools")
library(devtools)
library(stringr)
library(rJava)
install_github("bd2kccd/r-causal")
data("charity")
library(rcausal)
data("charity")
View(charity)
View(charity)
?cor
charity <- cor(charity)
View(charity)
?pc
tetradrunner.getAlgorithmDescription(algoId = 'fges')
tetradrunner.getAlgorithmParameters(algoId = 'fges',scoreId = 'fisher-z')
#Compute FGES search
tetradrunner <- tetradrunner(algoId = 'fges',df = charity,scoreId = 'fisher-z',
dataType = 'continuous',alpha=0.1,faithfulnessAssumed=TRUE,maxDegree=-1,verbose=TRUE)
tetradrunner$nodes #Show the result's nodes
tetradrunner$edges #Show the result's edges
View(tetradrunner)
install.packages("DOT")
library(DOT)
graph_dot <- tetradrunner.tetradGraphToDot(tetradrunner$graph)
dot(graph_dot)
data("charity")
tetradrunner.getAlgorithmDescription(algoId = 'fges')
tetradrunner.getAlgorithmParameters(algoId = 'fges',scoreId = 'fisher-z')
#Compute FGES search
tetradrunner <- tetradrunner(algoId = 'fges',df = charity,scoreId = 'fisher-z',
dataType = 'continuous',alpha=0.1,faithfulnessAssumed=TRUE,maxDegree=-1,verbose=TRUE)
tetradrunner$nodes #Show the result's nodes
tetradrunner$edges #Show the result's edges
graph_dot <- tetradrunner.tetradGraphToDot(tetradrunner$graph)
dot(graph_dot)
data("charity")
charity= cor(charity)
tetradrunner.getAlgorithmDescription(algoId = 'fges')
tetradrunner.getAlgorithmParameters(algoId = 'fges',scoreId = 'fisher-z')
#Compute FGES search
tetradrunner <- tetradrunner(algoId = 'fges',df = charity,scoreId = 'fisher-z',
dataType = 'continuous',alpha=0.1,faithfulnessAssumed=TRUE,maxDegree=-1,verbose=TRUE)
tetradrunner$nodes #Show the result's nodes
tetradrunner$edges #Show the result's edges
graph_dot <- tetradrunner.tetradGraphToDot(tetradrunner$graph)
dot(graph_dot)
data("charity")
#charity= cor(charity)
tetradrunner.getAlgorithmDescription(algoId = 'fges')
tetradrunner.getAlgorithmParameters(algoId = 'fges',scoreId = 'fisher-z')
#Compute FGES search
tetradrunner <- tetradrunner(algoId = 'fges',df = charity,scoreId = 'fisher-z',
dataType = 'continuous',alpha=0.1,faithfulnessAssumed=TRUE,maxDegree=-1,verbose=TRUE)
tetradrunner$nodes #Show the result's nodes
tetradrunner$edges #Show the result's edges
graph_dot <- tetradrunner.tetradGraphToDot(tetradrunner$graph)
dot(graph_dot)
?algoId
?tetradrunner
knitr::opts_chunk$set(echo = TRUE)
install.packages(pcalg)
install.packages("pcalg")
library(pcalg)
data("gmG")
View(gmG)
View(gmG8$x)
cor(gmG8$x)
n <- nrow (gmG8$ x)
V <- colnames(gmG8$ x) # labels aka node names
## estimate CPDAG
pc.fit <- pc(suffStat = list(C = cor(gmG8$x), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
plot(gmG8$g, main = "True DAG")
}
amat <- matrix(c(0,1,0, 1,0,1, 0,1,0), 3,3)
View(amat)
colnames(amat) <- rownames(amat) <- letters[1:3]
plot(as(t(amat), "graphNEL"))
addBgKnowledge(gInput = amat) ## amat is a valid CPDAG
## b -> c is directed; a -- b is not directed by applying
## Meek's orientation rules
bg1 <- addBgKnowledge(gInput = amat, x = "b", y = "c")
plot(as(t(bg1), "graphNEL"))
bg2 <- addBgKnowledge(gInput = amat, x = c("b","b"), y = c("c","a"))
plot(as(t(bg2), "graphNEL"))
bg3 <- addBgKnowledge(gInput = amat, x = "c", y = "b")
plot(as(t(bg3), "graphNEL"))
amat2 <- matrix(c(0,1,0, 1,0,1, 0,1,0), 3,3)
colnames(amat2) <- rownames(amat2) <- letters[1:3]
addBgKnowledge(gInput = amat2, x = c("c", "a"), y = c("b", "b"))
data -cor(gmG8$x)
data <-cor(gmG8$x)
addBgKnowledge(gInput = data)
bg1 <- addBgKnowledge(gInput = data, x = "author", y = "bar")
plot(as(t(bg1), "graphNEL"))
bg1 <- addBgKnowledge(gInput = data, x = "author", y = "bar")
bg1 <- addBgKnowledge(gInput = data, x = "V4", y = "V5")
plot(gmG8$g, main = "True DAG")
bg1 <- addBgKnowledge(gInput = data, x = "Author", y = "Bar")
bg1 <- addBgKnowledge(gInput = gmG8$x, x = "Author", y = "Bar")
gmG*$x
gmG8$x
amat
bg1 <- addBgKnowledge(gInput = data, x = c("Author","Bar"), y = c("Bar","Ctrl")
)
bg1 <- addBgKnowledge(gInput = data, x = c("Author","Bar","Bar"), y = c("Bar","Ctrl","V6"))
bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
addBgKnowledge(gInput = data, x = c("V5"), y = c("V6"))
data
addBgKnowledge(gInput = data, x = c("V7"), y = c("V8"))
addBgKnowledge(gInput = data, x = c("V5"), y = c("V8"))
plot(gmG8$g, main = "True DAG")
plot(as(t(data), "graphNEL"))
cor(amat)
amat
data <- data.frame(a=sample(1:100, 3, replace=FALSE), b=sample(1:100, 3, replace=FALSE),c=sample(1:100, 3, replace=FALSE))
data
cor(data)
data <- data.frame(a=sample(1:100, 3, replace=FALSE), b=sample(1:100, 3, replace=FALSE),c=sample(1:100, 3, replace=FALSE))
n <- nrow (data)
V <- colnames(data) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor(data), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
data <- data.frame(a=sample(1:100, 10, replace=FALSE), b=sample(1:100, 10, replace=FALSE),c=sample(1:100, 10, replace=FALSE))
n <- nrow (data)
V <- colnames(data) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor(data), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
data <- data.frame(a=sample(1:100, 100, replace=FALSE), b=sample(1:100, 100, replace=FALSE),c=sample(1:100, 100, replace=FALSE))
n <- nrow (data)
V <- colnames(data) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor(data), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
asia
?asia
library(bnlearn)
asia
cor(asia)
asia <- factor(asia)
levels(asia)
asia
library(bnlearn)
asia
data(asia)
rm(asia)
asia
asia[] <- +(asia=="yes")
View(asia)
cor(asia)
load(asia)
data(asia)
data(asia)
asia[] <- +(asia=="yes")
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor(asia), n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
addBgKnowledge(gInput = asia)
data(asia)
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(pc.fit, main = "Estimated CPDAG")
}
addBgKnowledge(gInput = cor_asia)
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("A"), y = c("L"))
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("S"), y = c("L"))
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("A","S"), y = c("L","L"))
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("T","S"), y = c("E","L"))
plot(asia)
dag(asia)
plot(asia)
graphviz.plot(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
graphviz.plot(asia_dag)
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
graphviz.plot(asia_dag)
plot(pc.fit, main = "Estimated CPDAG")
}
plot(asia_dag)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(asia_dag)
plot(pc.fit, main = "Estimated CPDAG")
}
graphviz.plot(asia_dag)
?pc
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(asia_dag)
plot(pc.fit, main = "Estimated CPDAG")
}
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
## estimate CPDAG
#addBgKnowledge(gInput = data)
#bg1 <- addBgKnowledge(gInput = data, x = c("Bar"), y = c("V6"))
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(asia_dag, main ="True Network")
plot(pc.fit, main = "Estimated CPDAG")
}
#bg1 <- addBgKnowledge(gInput = cor_asia, x = c("A"), y = c("T"))
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("A"), y = c("T"))
bg1 <- addBgKnowledge(gInput = cor_asia, x = c("S"), y = c("L"))
View(bg3)
amat
cor_asia
tabu(cor_asia)
tabu(casia)
tabu(asia)
asia
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia1[] <- +(asia=="yes")
Asia = data(asia)
Asia = data(asia)
Asia <- data(asia)
Asia
data(asia)
tabu(asia)
tabu(cor(asia)
)
cor(asia)
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
tabu(asia)
?tabu
write.csv(cor_asia, cor_asia.csv)
write.csv(cor_asia, "cor_asia.csv")
write.csv(cor_asia, "cor_asia.csv", row.names = FALSE)
View(cor_asia)
write.csv(cor_asia, "cor_asia.csv")
(learning.test
)
?amat.cpdag
cor(gmG8$x
)
plot(pc.fit, main = "Estimated CPDAG")
cor_asia
plot(asia_dag, main ="True Network")
?cor
data(asia)
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
asia[] <- +(asia=="yes")
cor_asia <- cor(asia)
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(asia_dag, main ="True Network")
plot(pc.fit, main = "Estimated CPDAG")
}
?cor
?cor
knitr::opts_chunk$set(echo = TRUE)
#Loading Asia dataset
data(asia)
# Ground truth network for Asia
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
library(bnlearn)
library(pcalg)
data(asia)
# Ground truth network for Asia
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
# Changing to numerical labels: 1s and 0s
asia[] <- +(asia=="yes")
# Converting into the Correlation Matrices
cor_asia <- cor(asia, method = c("kendall"))
View(cor_asia)
#Loading Asia dataset
data(asia)
# Ground truth network for Asia
asia_dag = model2network("[A][S][T|A][L|S][B|S][D|B:E][E|T:L][X|E]")
# Changing to numerical labels: 1s and 0s
asia[] <- +(asia=="yes")
# Converting into the Correlation Matrices using Kendall's tau statistic to estimate a rank-based measure of association.
cor_asia <- cor(asia, method = c("kendall"))
# Reading number of row and label names
n <- nrow (asia)
V <- colnames(asia) # labels aka node names
#Estimaing causal graph using PC algorithm
pc.fit <- pc(suffStat = list(C = cor_asia, n = n),
indepTest = gaussCItest, ## indep.test: partial correlations
alpha=0.01, labels = V, verbose = TRUE)
#Plotting
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
plot(asia_dag, main ="True Network")
plot(pc.fit, main = "Estimated CPDAG")
}
graphviz.plot(asia_dag)
#Plotting
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
graphviz.plot(asia_dag, main ="True Network")
plot(pc.fit, main = "Estimated CPDAG")
}
#Plotting
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
graphviz.plot(asia_dag, main ="True Network")
graphviz.plot(pc.fit, main = "Estimated CPDAG")
}
Estimated = as.bn(pc.fit)
Estimated = as.bn(pc.fit)
#Plotting
if (require(Rgraphviz)) {
## show estimated CPDAG
par(mfrow=c(1,2))
graphviz.plot(asia_dag, main ="True Network")
graphviz.plot(Estimated, main = "Estimated CPDAG")
}
